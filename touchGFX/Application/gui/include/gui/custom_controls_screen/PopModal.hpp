/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef POP_MODAL_HPP
#define POP_MODAL_HPP

#include <gui/common/Utils.hpp>
#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>

#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
using namespace touchgfx;

class PopModal : public ModalWindow
{
    public:
    PopModal();
    virtual ~PopModal() {}
    virtual void setupScreen(const BitmapId imgId, const TypedTextId txtId);
    void setAddParams(GenericCallback<void>& okCallback, GenericCallback<void>& cancelCallback);
    protected:
    FrontendApplication& application()
    {
        return *static_cast<FrontendApplication*>(Application::getInstance());
    }

    /*
    * Member Declarations
    */
    TextArea txtPop;
    ButtonWithLabel buttonOK;
    ButtonWithLabel buttonCancel;
    Box backgroudBox;
    Image imgPop;
private:
    GenericCallback<void>* m_onOK_callback;
    GenericCallback<void>* m_onCancel_callback;
    Callback<PopModal, const AbstractButton&> buttonClickedCallback;
    void buttonClicked(const AbstractButton& source);
};

#endif // POP_MODAL_HPP
