/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef INPUT_MODAL_HPP
#define INPUT_MODAL_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/setting_screen/SettingPresenter.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>

#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <gui/keyboard/CustomKeyboard.hpp>
using namespace touchgfx;
class InputModal : public ModalWindow
{
    public:
    InputModal();
    virtual ~InputModal() {}

    protected:
    FrontendApplication& application()
    {
        return *static_cast<FrontendApplication*>(Application::getInstance());
    }

    /*
    * Member Declarations
    */
    CustomKeyboard keypad;
    Box boxInput;
    TextAreaWithOneWildcard passwordEdit;
    TextArea passwordHeadline;
    TextAreaWithOneWildcard devicename;
    ButtonWithLabel buttonWithLabel1;
    ButtonWithLabel buttonWithLabel2;
    Box boxLine;

    /*
    * Wildcard Buffers
    */
    static const uint16_t PASSWORDEDIT_SIZE = 1;
    touchgfx::Unicode::UnicodeChar passwordEditBuffer[PASSWORDEDIT_SIZE];
    static const uint16_t DEVICENAME_SIZE = 1;
    touchgfx::Unicode::UnicodeChar devicenameBuffer[DEVICENAME_SIZE];

    private:

};

#endif // INPUT_MODAL_HPP
