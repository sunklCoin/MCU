#include <touchgfx/Font.hpp>

#ifndef NO_USING_NAMESPACE_TOUCHGFX
using namespace touchgfx;
#endif

FONT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_verdana_16_1bpp[] FONT_LOCATION_FLASH_ATTRIBUTE = {
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0x0027, ], Kerning dist = -1) 
    {0x0066,  1},  // (First char = [0x0066, ], Second char = [0x0029, ], Kerning dist = 1) 
    {0x002E, -1},  // (First char = [0x002E, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0046, -1},  // (First char = [0x0046, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0050, -1},  // (First char = [0x0050, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0056, -1},  // (First char = [0x0056, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0057, -1},  // (First char = [0x0057, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0066, -1},  // (First char = [0x0066, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0072, -1},  // (First char = [0x0072, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0076, -1},  // (First char = [0x0076, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x0079, -1},  // (First char = [0x0079, ], Second char = [0x002C, ], Kerning dist = -1) 
    {0x002E, -1},  // (First char = [0x002E, ], Second char = [0x002D, ], Kerning dist = -1) 
    {0x004B, -1},  // (First char = [0x004B, ], Second char = [0x002D, ], Kerning dist = -1) 
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0x002D, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x002D, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x002D, ], Kerning dist = -1) 
    {0x0046, -1},  // (First char = [0x0046, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0050, -1},  // (First char = [0x0050, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0056, -1},  // (First char = [0x0056, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0057, -1},  // (First char = [0x0057, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0066, -1},  // (First char = [0x0066, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0072, -1},  // (First char = [0x0072, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0076, -1},  // (First char = [0x0076, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0079, -1},  // (First char = [0x0079, ], Second char = [0x002E, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x003A, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x003A, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x003B, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x003B, ], Kerning dist = -1) 
    {0x0066,  1},  // (First char = [0x0066, ], Second char = [0x003F, ], Kerning dist = 1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0041, ], Kerning dist = -1) 
    {0x004C,  1},  // (First char = [0x004C, ], Second char = [0x004A, ], Kerning dist = 1) 
    {0x002D, -1},  // (First char = [0x002D, ], Second char = [0x0054, ], Kerning dist = -1) 
    {0x0041, -1},  // (First char = [0x0041, ], Second char = [0x0054, ], Kerning dist = -1) 
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0x0054, ], Kerning dist = -1) 
    {0x0065, -1},  // (First char = [0x0065, ], Second char = [0x0054, ], Kerning dist = -1) 
    {0x00AD, -1},  // (First char = [0xFFFFFFAD, ], Second char = [0x0054, ], Kerning dist = -1) 
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0x0056, ], Kerning dist = -1) 
    {0x002D, -1},  // (First char = [0x002D, ], Second char = [0x0059, ], Kerning dist = -1) 
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0x0059, ], Kerning dist = -1) 
    {0x00AD, -1},  // (First char = [0xFFFFFFAD, ], Second char = [0x0059, ], Kerning dist = -1) 
    {0x0066,  1},  // (First char = [0x0066, ], Second char = [0x005C, ], Kerning dist = 1) 
    {0x0066,  1},  // (First char = [0x0066, ], Second char = [0x005D, ], Kerning dist = 1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0061, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x0061, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0063, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x0064, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0065, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x0065, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0067, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x0067, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x006F, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x006F, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x0071, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0072, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0073, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x0073, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0075, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0x0075, ], Kerning dist = -1) 
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0x0076, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0076, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0077, ], Kerning dist = -1) 
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0x0079, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x0079, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0x007A, ], Kerning dist = -1) 
    {0x0066,  1},  // (First char = [0x0066, ], Second char = [0x007D, ], Kerning dist = 1) 
    {0x002E, -1},  // (First char = [0x002E, ], Second char = [0xFFFFFFAD, ], Kerning dist = -1) 
    {0x004B, -1},  // (First char = [0x004B, ], Second char = [0xFFFFFFAD, ], Kerning dist = -1) 
    {0x004C, -1},  // (First char = [0x004C, ], Second char = [0xFFFFFFAD, ], Kerning dist = -1) 
    {0x0054, -1},  // (First char = [0x0054, ], Second char = [0xFFFFFFAD, ], Kerning dist = -1) 
    {0x0059, -1},  // (First char = [0x0059, ], Second char = [0xFFFFFFAD, ], Kerning dist = -1) 
};

