/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef BTCONTROL_VIEW_BASE_HPP
#define BTCONTROL_VIEW_BASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/btcontrol_screen/BTControlPresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class BTControlViewBase : public touchgfx::View<BTControlPresenter>
{
public:
    BTControlViewBase();
    virtual ~BTControlViewBase() {}

protected:
    FrontendApplication& application() { 
        return *static_cast<FrontendApplication*>(Application::getInstance()); 
    }

    /*
     * Member Declarations
     */
    touchgfx::Image menuBg;
    touchgfx::ToggleButton switchBTBtn;
    touchgfx::Container MenuContainer;
    touchgfx::Button backBtn;
    touchgfx::TextArea BtControlDevicesTitle;
    touchgfx::TextAreaWithOneWildcard ListMenuEle;
    touchgfx::TextArea BTControlTitle;

    /*
     * Wildcard Buffers
     */
    static const uint16_t LISTMENUELE_SIZE = 1;
    touchgfx::Unicode::UnicodeChar ListMenuEleBuffer[LISTMENUELE_SIZE];

private:

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Callback Declarations
     */
    touchgfx::Callback<BTControlViewBase, const touchgfx::AbstractButton&> buttonCallback;

};

#endif // BTCONTROL_VIEW_BASE_HPP
